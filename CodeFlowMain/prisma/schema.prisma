generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  activityEvents ActivityEvent[]
  activitySessions ActivitySession[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  accountId         String
  providerId        String
  userId            String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verifications")
}

// Activity Tracking Models
model ActivityEvent {
  id          String   @id @default(cuid())
  eventId     String   @unique // Original ID from extension
  timestamp   DateTime
  type        String
  data        Json
  workspaceId String?
  projectName String?
  sessionId   String
  userId      String
  createdAt   DateTime @default(now())
  
  user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  session     ActivitySession @relation(references: [sessionId], fields: [sessionId], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([type, timestamp])
  @@map("activity_events")
}

model ActivitySession {
  id          String   @id @default(cuid())
  sessionId   String   @unique // Original session ID from extension
  startTime   DateTime
  endTime     DateTime?
  workspaceId String?
  projectName String?
  totalEvents Int      @default(0)
  activeTime  Int      @default(0) // in milliseconds
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  events      ActivityEvent[]

  @@index([userId, startTime])
  @@map("activity_sessions")
}